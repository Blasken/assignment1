import numpy as np
import sys

def read_data(path):
    f = open(path)
    data = []

    for line in f:
        x, y, state = line.split()
        data.append(((float(x), float(y)), int(state)))

    npdata = np.array(data,dtype=[('point', [('x', np.float),('y', np.float)]),
                                  ('sign', np.int)])
    return npdata


def hebbs_rule(patterns):
    p = len(patterns)
    N = len(patterns[0])
    wij = 1/N
    W = np.zeros((N,N))
    for i in range(N):
        for j in range(N):
            if i != j:
                for p_i in range(p):
                    W[i, j] += patterns[p_i][i] *patterns[p_i][j]
    return wij * W[j, j]

def random_patterns(N, p):
    patterns = []
    for i in range(p):
        #patterns.append(np.random.permutation(data)[:N])
        patterns.append(np.random.choice([-1,1],N))
    return patterns

def digits():
    p0 = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1, 1, 1, 1, 1, 1, 1,-1,-1,
          -1, 1, 1, 1,-1,-1, 1, 1, 1,-1,
          -1, 1, 1, 1,-1,-1, 1, 1, 1,-1,
          -1, 1, 1, 1,-1,-1, 1, 1, 1,-1,
          -1, 1, 1, 1,-1,-1, 1, 1, 1,-1,
          -1, 1, 1, 1,-1,-1, 1, 1, 1,-1,
          -1, 1, 1, 1,-1,-1, 1, 1, 1,-1,
          -1, 1, 1, 1,-1,-1, 1, 1, 1,-1,
          -1, 1, 1, 1,-1,-1, 1, 1, 1,-1,
          -1, 1, 1, 1,-1,-1, 1, 1, 1,-1,
          -1, 1, 1, 1,-1,-1, 1, 1, 1,-1,
          -1,-1, 1, 1, 1, 1, 1, 1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1,-1,-1,-1,-1,-1,-1,-1]

    p1 = [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1,
          -1,-1,-1, 1, 1, 1, 1,-1,-1,-1]

    p2 = [ 1, 1, 1, 1, 1, 1, 1, 1,-1,-1,
           1, 1, 1, 1, 1, 1, 1, 1,-1,-1,
          -1,-1,-1,-1,-1, 1, 1, 1,-1,-1,
          -1,-1,-1,-1,-1, 1, 1, 1,-1,-1,
          -1,-1,-1,-1,-1, 1, 1, 1,-1,-1,
          -1,-1,-1,-1,-1, 1, 1, 1,-1,-1,
          -1,-1,-1,-1,-1, 1, 1, 1,-1,-1,
           1, 1, 1, 1, 1, 1, 1, 1,-1,-1,
           1, 1, 1, 1, 1, 1, 1, 1,-1,-1,
           1, 1, 1,-1,-1,-1,-1,-1,-1,-1,
           1, 1, 1,-1,-1,-1,-1,-1,-1,-1,
           1, 1, 1,-1,-1,-1,-1,-1,-1,-1,
           1, 1, 1,-1,-1,-1,-1,-1,-1,-1,
           1, 1, 1,-1,-1,-1,-1,-1,-1,-1,
           1, 1, 1, 1, 1, 1, 1, 1,-1,-1,
           1, 1, 1, 1, 1, 1, 1, 1,-1,-1]

    p3 = [-1,-1, 1, 1, 1, 1, 1, 1,-1,-1,
          -1,-1, 1, 1, 1, 1, 1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1, 1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1, 1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1, 1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1, 1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1, 1, 1, 1,-1,
          -1,-1,-1,-1, 1, 1, 1, 1,-1,-1,
          -1,-1,-1,-1, 1, 1, 1, 1,-1,-1,
          -1,-1,-1,-1,-1,-1, 1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1, 1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1, 1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1, 1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1, 1, 1, 1,-1,
          -1,-1, 1, 1, 1, 1, 1, 1, 1,-1,
          -1,-1, 1, 1, 1, 1, 1, 1,-1,-1]

    p4 = [-1, 1, 1,-1,-1,-1,-1, 1, 1,-1,
          -1, 1, 1,-1,-1,-1,-1, 1, 1,-1,
          -1, 1, 1,-1,-1,-1,-1, 1, 1,-1,
          -1, 1, 1,-1,-1,-1,-1, 1, 1,-1,
          -1, 1, 1,-1,-1,-1,-1, 1, 1,-1,
          -1, 1, 1,-1,-1,-1,-1, 1, 1,-1,
          -1, 1, 1,-1,-1,-1,-1, 1, 1,-1,
          -1, 1, 1, 1, 1, 1, 1, 1, 1,-1,
          -1, 1, 1, 1, 1, 1, 1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1,-1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1,-1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1,-1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1,-1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1,-1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1,-1, 1, 1,-1,
          -1,-1,-1,-1,-1,-1,-1, 1, 1,-1]

    npp0 = np.array(p0, dtype=np.int)
    npp1 = np.array(p1, dtype=np.int)
    npp2 = np.array(p2, dtype=np.int)
    npp3 = np.array(p3, dtype=np.int)
    npp4 = np.array(p4, dtype=np.int)

    return [npp0, npp1, npp2, npp3, npp4]
